- (void)getAllMethods:(id)obj
{
	unsigned int methodCount =0;
	Method* methodList = class_copyMethodList([obj class],&methodCount);
	for(int i = 0; i < methodCount; i++) {
		Method method = methodList[i];
		const char* method_name = sel_getName(method_getName(method));
		int arguments = method_getNumberOfArguments(method);
		char dst;
        char *arg = malloc(arguments);
		for (int j = 0; j<arguments; j++) {
			method_getArgumentType(method, j, &dst, 1);
            arg[j] = dst;
		}
		BOOL flag = NO;
		NSMutableArray *parameters = [NSMutableArray array];
		for (int k = 0; k < 32; k++) {
			if (arg[k] != '\0') {
				if (arg[k] == ':') {
					flag = YES;
					continue;
				}
				if (flag) {
					char type[2];
					type[0] = arg[k];
					type[1] = '\0';
					[parameters addObject:[self parameterWithType:type]];
				}
			} else {
				break;
			}
		}
		if (![[NSString stringWithUTF8String:method_name] containsString:@"set"]) {
			[self performSelector:NSSelectorFromString([NSString stringWithUTF8String:method_name]) target:obj withArguments:parameters];
		}
        free(arg);
	}
	free(methodList);
}

- (id)parameterWithType:(char *)type
{
	if (strcmp(type, @encode(id)) == 0) {
		return [NSNull null];
	} else if (strcmp(type, @encode(short)) == 0) {
		return [NSNumber numberWithShort:0];
	} else if (strcmp(type, @encode(unsigned short)) == 0) {
		return [NSNumber numberWithUnsignedShort:0];
	} else if (strcmp(type, @encode(int)) == 0) {
		return [NSNumber numberWithInt:0];
	} else if (strcmp(type, @encode(unsigned int)) == 0) {
		return [NSNumber numberWithUnsignedInt:0];
	} else if (strcmp(type, @encode(long)) == 0) {
		return [NSNumber numberWithLong:0];
	} else if (strcmp(type, @encode(unsigned long)) == 0) {
		return [NSNumber numberWithUnsignedLong:0];
	} else if (strcmp(type, @encode(long long)) == 0) {
		return [NSNumber numberWithLongLong:0];
	} else if (strcmp(type, @encode(unsigned long long)) == 0) {
		return [NSNumber numberWithUnsignedLongLong:0];
	} else if (strcmp(type, @encode(NSInteger)) == 0) {
		return [NSNumber numberWithInteger:0];
	} else if (strcmp(type, @encode(NSUInteger)) == 0) {
		return [NSNumber numberWithUnsignedInteger:0];
	} else if (strcmp(type, @encode(float)) == 0) {
		return [NSNumber numberWithFloat:0.f];
	} else if (strcmp(type, @encode(double)) == 0) {
		return [NSNumber numberWithDouble:0.f];
	} else if (strcmp(type, @encode(BOOL)) == 0) {
		return [NSNumber numberWithBool:YES];
	}

	return [NSNull null];
}
- (id)performSelector:(SEL)aSelector target:(id)target withArguments:(NSArray *)arguments
{
	if (aSelector == nil) {
		return nil;
	}

	NSMethodSignature *signature = [[target class] instanceMethodSignatureForSelector:aSelector];
	if (signature == nil) {
		return nil;
	}

	NSInvocation *invocation = [NSInvocation invocationWithMethodSignature:signature];
	if (invocation == nil) {
		return nil;
	}

	invocation.target = target;
	invocation.selector = aSelector;

	if ([arguments isKindOfClass:[NSArray class]]) {
		NSInteger count = MIN(arguments.count, signature.numberOfArguments - 2);
		for (int i = 0; i < count; i++) {
			const char *type = [signature getArgumentTypeAtIndex:2 + i];

			id argument = arguments[i];
			if (strcmp(type, @encode(id)) == 0) {
				[invocation setArgument:&argument atIndex:2 + i];
			} else if (strcmp(type, @encode(short)) == 0) {
				short arg = [argument shortValue];
				[invocation setArgument:&arg atIndex:2 + i];
			} else if (strcmp(type, @encode(unsigned short)) == 0) {
				short arg = [argument unsignedShortValue];
				[invocation setArgument:&arg atIndex:2 + i];
			} else if (strcmp(type, @encode(int)) == 0) {
				int arg = [argument intValue];
				[invocation setArgument:&arg atIndex:2 + i];
			} else if (strcmp(type, @encode(unsigned int)) == 0) {
				int arg = [argument unsignedIntValue];
				[invocation setArgument:&arg atIndex:2 + i];
			} else if (strcmp(type, @encode(long)) == 0) {
				long arg = [argument longValue];
				[invocation setArgument:&arg atIndex:2 + i];
			} else if (strcmp(type, @encode(unsigned long)) == 0) {
				long arg = [argument unsignedLongValue];
				[invocation setArgument:&arg atIndex:2 + i];
			} else if (strcmp(type, @encode(long long)) == 0) {
				long long arg = [argument longLongValue];
				[invocation setArgument:&arg atIndex:2 + i];
			} else if (strcmp(type, @encode(unsigned long long)) == 0) {
				long long arg = [argument unsignedLongLongValue];
				[invocation setArgument:&arg atIndex:2 + i];
			} else if (strcmp(type, @encode(NSInteger)) == 0) {
				long long arg = [argument integerValue];
				[invocation setArgument:&arg atIndex:2 + i];
			} else if (strcmp(type, @encode(NSUInteger)) == 0) {
				long long arg = [argument unsignedIntValue];
				[invocation setArgument:&arg atIndex:2 + i];
			} else if (strcmp(type, @encode(float)) == 0) {
				float arg = [argument floatValue];
				[invocation setArgument:&arg atIndex:2 + i];
			} else if (strcmp(type, @encode(double)) == 0) {
				double arg = [argument doubleValue];
				[invocation setArgument:&arg atIndex:2 + i];
			} else if (strcmp(type, @encode(BOOL)) == 0) {
				BOOL arg = [argument boolValue];
				[invocation setArgument:&arg atIndex:2 + i];
			}
		}
	}

	[invocation invoke];

	id returnVal;
	if (strcmp(signature.methodReturnType, @encode(id)) == 0) {
		[invocation getReturnValue:&returnVal];
	}

	return returnVal;
}

+ (NSString*)removeLastOneChar:(NSString*)origin{
    NSString* cutted = [origin length] > 0 ? [origin substringToIndex:([origin length]-2)] : origin;
    return cutted;
}
